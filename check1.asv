%% 1. Create an ardupilotreader object to manage the log file
logFile = "logs/hyd_26_flight.bin";  % Change to your file path
ardupilotObj = ardupilotreader(logFile);

%% 2. Use readMessages to retrieve the relevant ATT messages
%    (Here we assume your log has an 'ATT' message containing
%     DesRoll, Roll, DesPitch, Pitch, DesYaw, and Yaw)
attMessages = readMessages(ardupilotObj, 'MessageName', {'ATT'});
% disp(height(attMessages));
% head(attMessages);
% attRow = attMessages(1,:);
% attTimetable = attRow.MsgData{1};  
% attTimetable.Properties.VariableNames

% Read Mode Change messages.
modeMsg = readMessages(bin, 'MessageName', {'MODE'});
modeData = modeMsg.MsgData{1,1};

%% Convert modeData to a timetable if not already
if ~istimetable(modeData)
    modeData = table2timetable(modeData, 'RowTimes', 'timestamp');
end

% Sort the timetable by timestamp
modeData = sortrows(modeData);

modes = modeData.Mode;

%% Identify mode transitions
ind0to10 = find(modes(1:end-1) == 0 & modes(2:end) ~= 0) + 1;
ind10to0 = find(modes(1:end-1) ~= 0 & modes(2:end) == 0) + 1;

if isempty(ind0to10), ind0to10 = 1; end          % If none found, default to first
if isempty(ind10to0), ind10to0 = length(modes); end  % If none found, default to last

% Extract the corresponding row times from your timetable
t0to10 = modeData.Properties.RowTimes(ind0to10);
t10to0 = modeData.Properties.RowTimes(ind10to0);

d1 = duration(string(t0to10),'InputFormat','hh:mm:ss.SSSSSS');
d2 = duration(string(t10to0),'InputFormat','hh:mm:ss.SSSSSS');
disp(d1)

d1 = d1(1);
d2 = d2(end);

attData = attMessages.MsgData{1,1}

idx = attData.timestamp >= d1 & attData.timestamp <= d2;
attSubset = attData(idx,:);


%% 3. Extract the desired vs. actual attitude data
time       = [attSubset.timestamp]';      % or TimeUS, depending on your log
desRoll    = [attSubset.DesRoll]';    % Desired Roll
roll       = [attSubset.Roll]';       % Actual Roll
desPitch   = [attSubset.DesPitch]';   % Desired Pitch
pitch      = [attSubset.Pitch]';      % Actual Pitch
desYaw     = [attSubset.DesYaw]';     % Desired Yaw
yaw        = [attSubset.Yaw]';        % Actual Yaw

%% Suppose altitude is stored in attSubset.Alt (adjust if your variable name differs)
gpsMsg = readMessages(bin, 'MessageName', {'GPS'});
gpsData = gpsMsg.MsgData{1,1};
alt = gpsData.Alt;

attTT = table2timetable(attSubset, 'RowTimes', 'timestamp');
gpsTT = table2timetable(gpsData, 'RowTimes', 'timestamp');
syncTT = synchronize(attTT, gpsTT, 'nearest');

%% Then plot Actual Roll, Pitch, Yaw vs. Altitude
figure('Name','Attitude vs Altitude');

% -- Roll vs Altitude --
subplot(3,1,1);
plot(syncTT.Alt, syncTT.Roll, 'b');
grid on;
legend('Roll', 'Location','best');
xlabel('Altitude');
ylabel('Roll (deg)');
title('Roll vs. Altitude');

% -- Pitch vs Altitude --
subplot(3,1,2);
plot(syncTT.Alt, syncTT.Pitch, 'b');
grid on;
legend('Pitch', 'Location','best');
xlabel('Altitude');
ylabel('Pitch (deg)');
title('Pitch vs. Altitude');

% -- Yaw vs Altitude --
subplot(3,1,3);
plot(syncTT.Alt, syncTT.Yaw, 'b');
grid on;
legend('Yaw', 'Location','best');
xlabel('Altitude');
ylabel('Yaw (deg)');
title('Yaw vs. Altitude');
